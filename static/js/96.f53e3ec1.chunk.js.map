{"version":3,"file":"static/js/96.f53e3ec1.chunk.js","mappings":"4RAEaA,EAAaC,EAAAA,EAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sFAOxBC,EAAQH,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qSAcpBG,EAASL,EAAAA,EAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,iX,SCnBtBK,EAAiB,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAC/BC,GAA0BC,EAAAA,EAAAA,UAAS,CACjCC,OAAQ,KACRC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAFKK,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAIhBI,GAAWC,EAAAA,EAAAA,QAAO,OAExBC,EAAAA,EAAAA,YAAU,WACRF,EAASG,QAAQC,OACnB,GAAG,IAEH,IAcMC,EAAQ,WACZN,EAAS,CACPJ,OAAQ,IAEZ,EAEMW,GAAWC,EAAAA,EAAAA,UAAQ,kBChBd,WAGX,IAH0B,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAC3CA,KAAQ,CACb,IAAIS,EAAqB,GAAdJ,EAAML,GAEfI,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAEV,CACA,OAAOL,CACT,CDAiCQ,EAAQ,GAAE,IAEzC,OACEC,EAAAA,EAAAA,MAACvC,EAAU,CAACU,SAfO,SAAA8B,GACnBA,EAAEC,iBACF/B,GAAQgC,EAAAA,EAAAA,GAAC,CAAC,EAAI1B,IACdO,GACF,EAWqCoB,SAAA,EACjCJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAASrB,KAChBoB,EAAAA,EAAAA,KAACxC,EAAK,CACJ0B,GAAIN,EACJsB,IAAK5B,EACL6B,MAAO/B,EAAMH,OACbmC,SA9Ba,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACdC,EAAgBD,EAAhBC,KAAMJ,EAAUG,EAAVH,MACd9B,GAAQyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACL1B,GAAK,IAAAoC,EAAAA,EAAAA,GAAA,GACPD,EAAOJ,IAEZ,EAyBQM,UAAQ,EACRC,KAAK,OACLH,KAAK,SACLI,YAAY,0BAGhBX,EAAAA,EAAAA,KAACtC,EAAM,CAACgD,KAAK,SAAQX,SAAC,aAG5B,E,kBEhDaa,EAAa,WACxB,IAAA7C,GAA0BC,EAAAA,EAAAA,UAAS,IAAGE,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA/B8C,EAAK3C,EAAA,GAAE4C,EAAQ5C,EAAA,GACtB6C,GAA8B/C,EAAAA,EAAAA,WAAS,GAAMgD,GAAA7C,EAAAA,EAAAA,GAAA4C,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA0BnD,EAAAA,EAAAA,UAAS,IAAGoD,GAAAjD,EAAAA,EAAAA,GAAAgD,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAtD,EAAAA,EAAAA,GAAAoD,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BxD,EAASyD,EAAaE,IAAI,WAEhCpD,EAAAA,EAAAA,YAAU,WACR,IAAMqD,EAAU,eAAAhE,GAAAiE,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEE,OAFFF,EAAAC,KAAA,EAEflB,GAAW,GAAMiB,EAAAE,KAAA,GAGPC,EAAAA,EAAAA,IAAgBrE,GAAQ,KAAD,EAAAgE,EAAAE,EAAAI,KADvBL,EAAOD,EAAfO,KAAQN,QAEVpB,EAAgB,OAAPoB,QAAO,IAAPA,GAAAA,EAASlD,OAASkD,EAAU,IAAIC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEzCb,EAASa,EAAAM,GAAMC,SAAS,QAEN,OAFMP,EAAAC,KAAA,GAExBlB,GAAW,GAAOiB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAErB,kBAZe,OAAAnE,EAAAgF,MAAA,KAAA9D,UAAA,KAaZd,GACF4D,GAEJ,GAAG,CAAC5D,IAOJ,OACE0B,EAAAA,EAAAA,MAAAmD,EAAAA,SAAA,CAAA/C,SAAA,EACEC,EAAAA,EAAAA,KAACpC,EAAc,CAACE,SAPC,SAAHuC,GAAoB,IAAdpC,EAAMoC,EAANpC,OACtB0D,EAAgB,CAAE1D,OAAAA,IAClB6C,EAAS,GACX,IAKKO,IAASrB,EAAAA,EAAAA,KAAA,KAAAD,SAAIsB,IACbJ,IAAWjB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACdgD,QAAQlC,EAAM7B,UACbgB,EAAAA,EAAAA,KAACgD,EAAAA,GAAQ,CAAAjD,SACNc,EAAMoC,KAAI,SAAAC,GAAgD,IAA7ChE,EAAEgE,EAAFhE,GAAIiE,EAAKD,EAALC,MAAOC,EAAaF,EAAbE,cAAeC,EAAWH,EAAXG,YACtC,OACErD,EAAAA,EAAAA,KAACsD,EAAAA,EAAS,CAERpE,GAAIA,EACJiE,MAAOA,EACPC,cAAeA,EACfC,YAAaA,GAJRnE,EAOX,QAKV,EC3DaqE,EAAS,WACpB,OACEvD,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACY,EAAU,KAGjB,C","sources":["components/FilmSearch/FilmSearchForm/FilmSearchForm.styled.jsx","components/FilmSearch/FilmSearchForm/FilmSearchForm.jsx","../node_modules/nanoid/index.browser.js","components/FilmSearch/FilmSearch.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormSearch = styled.form`\n  display: flex;\n  gap: 20px;\n  margin-right: 20px;\n  margin-top: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 10px 15px;\n  width: 350px;\n  border-radius: 5px;\n  font-size: 18px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  border: none;\n\n  :focus {\n    outline: 2px solid #2c2a2a;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 15px;\n  width: 100px;\n  border-radius: 5px;\n  font-size: 18px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 200ms ease-in-out;\n  cursor: pointer;\n  :hover,\n  :focus-visible {\n    color: black;\n    background-color: #b0a8a8;\n  }\n`;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Button, FormSearch, Input } from './FilmSearchForm.styled';\n\nexport const FilmSearchForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    search: '',\n  });\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    reset();\n  };\n\n  const reset = () => {\n    setState({\n      search: '',\n    });\n  };\n\n  const searchId = useMemo(() => nanoid(), []);\n\n  return (\n    <FormSearch onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor={searchId}></label>\n        <Input\n          id={searchId}\n          ref={inputRef}\n          value={state.search}\n          onChange={handleChange}\n          required\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Enter search film\"\n        />\n      </div>\n      <Button type=\"submit\">Search</Button>\n    </FormSearch>\n  );\n};\nexport default FilmSearchForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getrFilmsByName } from 'api/filmsApi';\nimport { FilmSearchForm } from './FilmSearchForm/FilmSearchForm';\nimport { FilmList } from 'components/Films/Films.styled';\nimport FilmsItem from '../Films/FilmsItem/FilmsItem';\n\nexport const FilmSearch = () => {\n  const [films, setFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const search = searchParams.get('search');\n\n  useEffect(() => {\n    const fetchFilms = async () => {\n      try {\n        setLoading(true);\n        const {\n          data: { results },\n        } = await getrFilmsByName(search);\n        setFilms(results?.length ? results : []);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (search) {\n      fetchFilms();\n    }\n  }, [search]);\n\n  const handleSearch = ({ search }) => {\n    setSearchParams({ search });\n    setFilms([]);\n  };\n\n  return (\n    <>\n      <FilmSearchForm onSubmit={handleSearch} />\n      {error && <p>{error}</p>}\n      {loading && <p>...Loading</p>}\n      {Boolean(films.length) && (\n        <FilmList>\n          {films.map(({ id, title, original_name, poster_path }) => {\n            return (\n              <FilmsItem\n                key={id}\n                id={id}\n                title={title}\n                original_name={original_name}\n                poster_path={poster_path}\n              />\n            );\n          })}\n        </FilmList>\n      )}\n    </>\n  );\n};\n\nexport default FilmSearch;\n","import { FilmSearch } from 'components/FilmSearch/FilmSearch';\n\nexport const Movies = () => {\n  return (\n    <div>\n      <FilmSearch />\n    </div>\n  );\n};\n"],"names":["FormSearch","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Button","_templateObject3","FilmSearchForm","_ref","onSubmit","_useState","useState","search","_useState2","_slicedToArray","state","setState","inputRef","useRef","useEffect","current","focus","reset","searchId","useMemo","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","_jsxs","e","preventDefault","_objectSpread","children","_jsx","htmlFor","ref","value","onChange","_ref2","target","name","_defineProperty","required","type","placeholder","FilmSearch","films","setFilms","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","fetchFilms","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getrFilmsByNam","results","_context","prev","next","getrFilmsByName","sent","data","t0","message","finish","stop","apply","_Fragment","Boolean","FilmList","map","_ref3","title","original_name","poster_path","FilmsItem","Movies"],"sourceRoot":""}